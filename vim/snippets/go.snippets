# multiplas const
snippet cons "const ( ... )"
	const (
		$1 = ${0:iota}
	)

# for comum
snippet for "for condition {}"
	for ${1:condition} {
		${0:// ...}
	}

# for com contador
snippet fori "for i := 0; i > x; i++ {}"
	for ${1:i} := ${2:0}; $1 ${3:>} ${4:x}; $1${5:++} {
		${0:// ...}
	}

# "foreach"
snippet forr "for k, v := range array {...}"
	for ${1:_}, ${2:num} := range ${3:nums} {
		${0:// ...}
	}

# declaração de função
snippet func "func X(...) ... {...}"
	func ${1:name}(${2:params}) ${3:type} {
		${0:// ...}
	}

snippet fp "fmt.Println(...)"
	fmt.Println(${1})

snippet ff "fmt.Printf('', x)"
	fmt.Printf("${1}", ${2})

snippet imp "import (...)"
	import (
		"${1:package}"
	)

snippet pkg "package ..."
	package "${1:package}"

snippet pkgm "package main"
	package main

# declaração de struct
snippet str "type X struct {...}"
	type ${1:Struct} struct {
		${0:// ...}
	}

# declaração de interface
	snippet int "type I interface {...}"
	type ${1:Interface} interface {
		${0:// ...}
	}


snippet switch "switch expression {...}"
	switch ${1:expression} {
	case ${2}:
		${0:// ...}
	}

# HTTP handler
snippet funch "func handler(w http.ResponseWriter, r *http.Request) {...}"
	func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
		${0:// ...}
	}

# inicialização e atribuição
	snippet : "x := value"
	${1:name} := ${0:value}

# if
snippet if "if condition {...}"
	if ${1:condition} {
		${0:// ...}
	}
# teste de erro padrão
snippet iferr "if err != nil"
	if err != nil {
		${0:// ...}
	}
