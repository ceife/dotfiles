# credits: 
#   https://gist.github.com/stephenturner/d291570e25ee797580a4
#   https://gist.github.com/pksunkara/988716
#   https://github.com/alikins/gitconfig/blob/master/gitconfig
[user]
  name = Felipe Silva
  email = felipe.dacs@gmail.com
  username = nenitf
[core]
  editor = vim
[color]
  ui = true
[color "branch"]
  current = yellow bold
  local = green bold
  remote = cyan bold
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "status"]
  added = green bold
  changed = yellow bold
  untracked = red bold
[alias]
  ## git flow ##
  # http://danielkummer.github.io/git-flow-cheatsheet/index.pt_BR.html
  # necessario dar push na master e na develop vazias
  fi = flow init

  # features
  ffs = flow feature start
  ffps = flow feature publish
  ffpl = flow feature pull
  fff = flow feature finish

  # releases
  frs = flow release start
  frps = flow release publish
  frpl = flow release pull
  frf = flow release finish

  # hotfixes
  fhs = flow hotfix start
  fhf = flow hotfix finish

  # caso as autenticações falhem é necessario excluir/enviar remotamente as branches/tags
  # git push origin BRANCH
  # git push origin :BRANCH
  # git push origin TAG
  # git push origin :TAG

  #############
  a = add --all
  ai = add -i
  #############
  ap = apply
  aps = apply --stat
  apc = apply --check
  #############
  ama = am --abort
  amr = am --resolved
  ams = am --skip
  #############
  # para apagar branch remote => git push origin :branch
  b = branch
  ba = branch -a
  bd = branch -d
  bdd = branch -D
  br = branch -r
  bc = rev-parse --abbrev-ref HEAD
  bu = !git rev-parse --abbrev-ref --symbolic-full-name "@{u}"
  #############
  c = commit
  ca = commit -a
  cm = commit -m
  cam = commit -am
  cem = commit --allow-empty -m
  cd = commit --amend
  cad = commit -a --amend
  ced = commit --allow-empty --amend
  #############
  cl = clone
  cld = clone --depth 1
  #############
  cp = cherry-pick
  cpa = cherry-pick --abort
  cpc = cherry-pick --continue
  #############
  d = diff
  dp = diff --patience
  dc = diff --cached
  dk = diff --check
  dck = diff --cached --check
  dt = difftool
  dct = difftool --cached
  #############
  f = fetch
  fo = fetch origin
  fr = fetch --all ; git reset --hard origin/master
  fu = fetch upstream
  #############
  fp = format-patch
  #############
  fk = fsck
  #############
  g = grep -p
  #############
  # Para pesquisar commits usar: --grep "palavra"
  l =  log --decorate --graph --abbrev-commit --date=relative --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset %C(yellow)%d%Creset '
  ld = log --decorate --graph --abbrev-commit --date=short --pretty=format:'%Cred%h%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset %C(yellow)%d%Creset'
  lg = log --date=format:'%d/%m/%Y %a %H:%M:%S' --decorate --graph --pretty=format:'%Cred%H%Creset %C(yellow)%d%Creset\n%C(bold blue)%an%Creset em %Cgreen%ad%Creset\n\n%C(bold)%s\n%b'
  #############
  ls = ls-files
  lsf = !git ls-files | grep -i
  #############
  m = merge
  ma = merge --abort
  mc = merge --continue
  ms = merge --skip
  #############
  o = checkout
  ob = checkout -b
  of = "!f() { git checkout -b \"feat/$1\"; }; f"
  #############
  pr = prune -v
  #############
  ps = push
  psf = push -f
  psu = push -u
  pst = push --tags
  #############
  pso = push origin
  psao = push --all origin
  psfo = push -f origin
  psuo = push -u origin
  #############
  psom = push origin master
  psaom = push --all origin master
  psfom = push -f origin master
  psuom = push -u origin master
  psoc = !git push origin $(git bc)
  psaoc = !git push --all origin $(git bc)
  psfoc = !git push -f origin $(git bc)
  psuoc = !git push -u origin $(git bc)
  psdc = !git push origin :$(git bc)
  #############
  pl = pull
  pb = pull --rebase
  #############
  plo = pull origin
  pbo = pull --rebase origin
  plom = pull origin master
  ploc = !git pull origin $(git bc)
  pbom = pull --rebase origin master
  pboc = !git pull --rebase origin $(git bc)
  #############
  plu = pull upstream
  plum = pull upstream master
  pluc = !git pull upstream $(git bc)
  pbum = pull --rebase upstream master
  pbuc = !git pull --rebase upstream $(git bc)
  #############
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbi = rebase --interactive
  rbs = rebase --skip
  #############
  re = reset
  rh = reset HEAD
  reh = reset --hard
  rem = reset --mixed
  res = reset --soft
  rehh = reset --hard HEAD
  remh = reset --mixed HEAD
  resh = reset --soft HEAD
  #############
  r = remote
  ra = remote add
  rr = remote rm
  rv = remote -v
  rn = remote rename
  rp = remote prune
  rs = remote show
  rao = remote add origin
  rau = remote add upstream
  rro = remote remove origin
  rru = remote remove upstream
  rso = remote show origin
  rsu = remote show upstream
  rpo = remote prune origin
  rpu = remote prune upstream
  #############
  rmf = rm -f
  rmrf = rm -r -f
  #############
  s = status
  sb = status -s -b
  #############
  sa = stash apply
  sc = stash clear
  sd = stash drop
  sl = stash list
  sp = stash pop
  ss = stash save
  ssk = stash save -k
  sw = stash show
  st = !git stash list | wc -l 2>/dev/null | grep -oEi '[0-9][0-9]*'
  #############
  t = tag --sort=taggerdate
  td = tag -d
  #############
  w = show
  wp = show -p
  wr = show -p --no-color
  #############
  svnr = svn rebase
  svnd = svn dcommit
  svnl = svn log --oneline --show-commit
  #############
  subadd = !sh -c 'git submodule add git://github.com/$1 $2/$(basename $1)' -
  subup = submodule update --init --recursive
  subpull = !git submodule foreach git pull --tags origin master
  #############
  assume = update-index --assume-unchanged
  unassume = update-index --no-assume-unchanged
  assumed = !git ls -v | grep ^h | cut -c 3-
  unassumeall = !git assumed | xargs git unassume
  assumeall = !git status -s | awk {'print $2'} | xargs git assume
  #############
  bump = !sh -c 'git commit -am \"Version bump v$1\" && git psuoc && git release $1' -
  #release = !sh -c 'git tag v$1 && git pst' -
  unrelease = !sh -c 'git tag -d v$1 && git pso :v$1' -
  merged = !sh -c 'git o master && git plom && git bd $1 && git rpo' -
  aliases = !git config -l | grep alias | cut -c 7-
  snap = !git stash save 'snapshot: $(date)' && git stash apply 'stash@{0}'
  bare = !sh -c 'git symbolic-ref HEAD refs/heads/$1 && git rm --cached -r . && git clean -xfd' -
  whois = !sh -c 'git log -i -1 --author=\"$1\" --pretty=\"format:%an <%ae>\"' -
  serve = daemon --reuseaddr --verbose --base-path=. --export-all ./.git
  #############
  behind = !git rev-list --left-only --count $(git bu)...HEAD
  ahead = !git rev-list --right-only --count $(git bu)...HEAD
  #############
  configreset = git config --local credential.helper ""
  ours = "!f() { git checkout --ours $@ && git add $@; }; f"
  theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"
  subrepo = !sh -c 'git filter-branch --prune-empty --subdirectory-filter $1 master' -
  human = name-rev --name-only --refs=refs/heads/*

  #############
  # default macros of commits/messages
  # https://github.com/ahmadawais/Emoji-Log
  # RELEASE.
  aula = "!f() { git add -A; git commit -m \"RELEASE: Aula $@\"; git tag \"aula-$@\"; git push origin master --tags; }; f"
  release = "!f() { git tag \"$@\"; git push origin master --tags; }; f"

  ## OAB
  cfe = "!f() { if [ -z $2 ]; then git commit -m \"feat: $1\"; else git commit -m \"feat($2): $1\"; fi; }; f"
  cfi = "!f() { if [ -z $2 ]; then git commit -m \"fix: $1\"; else git commit -m \"fix($2): $1\"; fi; }; f"
  cre = "!f() { if [ -z $2 ]; then git commit -m \"refactor: $1\"; else git commit -m \"refactor($2): $1\"; fi; }; f"
  cdo = "!f() { if [ -z $2 ]; then git commit -m \"docs: $1\"; else git commit -m \"docs($2): $1\"; fi; }; f"
  cst = "!f() { if [ -z $2 ]; then git commit -m \"style: $1\"; else git commit -m \"style($2): $1\"; fi; }; f"
  cte = "!f() { if [ -z $2 ]; then git commit -m \"test: $1\"; else git commit -m \"test($2): $1\"; fi; }; f"
  cch = "!f() { if [ -z $2 ]; then git commit -m \"chore: $1\"; else git commit -m \"chore($2): $1\"; fi; }; f"
  cim = "!f() { if [ -z $2 ]; then git commit -m \"improve: $1\"; else git commit -m \"improve($2): $1\"; fi; }; f"

[commit]
  # template = ~/.gitcommit
