# credits: 
#   https://gist.github.com/stephenturner/d291570e25ee797580a4
#   https://gist.github.com/pksunkara/988716
#   https://github.com/alikins/gitconfig/blob/master/gitconfig
[user]
    name = Felipe Silva
    email = felipe.dacs@gmail.com
    username = nenitf
[core]
    editor = vim
    excludesfile = ~/dev/dotfiles/cpfiles/git/.gitignore
[color]
    ui = true
[color "branch"]
    current = yellow bold
    local = green bold
    remote = cyan bold
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red bold
[merge]
	tool = vimdiff
[difftool]
    prompt = false
	tool = vimdiff
[alias]
    #############
    a = add --all
    ai = add -i
    #############
    # para apagar branch remote => git push origin :branch
    b = branch
    bd = branch -d
    bdd = branch -D
    #############
    c = commit
    ca = commit --amend
    cm = commit -m

    ## Semantic commits
    #  cfe = "!f() { if [ -z \"$2\" ]; then git commit -m \"feat: $1\"; else git commit -m \"feat($1): $2\"; fi; }; f"
    #  cfi = "!f() { if [ -z \"$2\" ]; then git commit -m \"fix: $1\"; else git commit -m \"fix($1): $2\"; fi; }; f"
    #  cre = "!f() { if [ -z \"$2\" ]; then git commit -m \"refactor: $1\"; else git commit -m \"refactor($1): $2\"; fi; }; f"
    #  cdo = "!f() { if [ -z \"$2\" ]; then git commit -m \"docs: $1\"; else git commit -m \"docs($1): $2\"; fi; }; f"
    #  cst = "!f() { if [ -z \"$2\" ]; then git commit -m \"style: $1\"; else git commit -m \"style($1): $2\"; fi; }; f"
    #  cte = "!f() { if [ -z \"$2\" ]; then git commit -m \"test: $1\"; else git commit -m \"test($1): $2\"; fi; }; f"
    #  cch = "!f() { if [ -z \"$2\" ]; then git commit -m \"chore: $1\"; else git commit -m \"chore($1): $2\"; fi; }; f"
    #  cim = "!f() { if [ -z \"$2\" ]; then git commit -m \"improve: $1\"; else git commit -m \"improve($1): $2\"; fi; }; f"

    #############
    cl = clone
    #############
    d = diff
    #############
    f = fetch
    fo = fetch origin
    fr = fetch --all ; git reset --hard origin/master
    fu = fetch upstream
    #############
    # Para pesquisar commits usar: --grep "palavra"
    l =  log --decorate --graph --abbrev-commit --date=relative --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset %C(yellow)%d%Creset '
    ld = log --decorate --graph --abbrev-commit --date=short --pretty=format:'%Cred%h%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset %C(yellow)%d%Creset'
    lg = log --date=format:'%d/%m/%Y %a %H:%M:%S' --decorate --graph --pretty=format:'%Cred%H%Creset %C(yellow)%d%Creset\n%C(bold blue)%an%Creset em %Cgreen%ad%Creset\n\n%C(bold)%s\n%b'
    #############
    m = merge
    ma = merge --abort
    mc = merge --continue
    ms = merge --skip
    #############
    o = checkout
    ob = checkout -b
    of = "!f() { git checkout -b \"feat/$1\"; }; f"
    #############
    ps = push
    psf = push -f
    pst = push --tags
    #############
    pso = push origin
    psfo = push -f origin
    psom = push origin master
    psfom = push -f origin master
    psod = push origin develop
    psfod = push -f origin develop
    #############
    pl = pull
    pb = pull --rebase
    #############
    plt = pull --tags
    #############
    plo = pull origin
    pbo = pull --rebase origin
    plod = pull origin develop
    pbod = pull --rebase origin develop
    plom = pull origin master
    pbom = pull --rebase origin master
    #############
    plu = pull upstream
    plum = pull upstream master
    pbum = pull --rebase upstream master
    #############
    rb = rebase
    rba = rebase --abort
    rbc = rebase --continue
    rbi = rebase --interactive
    rbs = rebase --skip
    #############
    re = reset
    rh = reset HEAD
    reh = reset --hard
    rem = reset --mixed
    res = reset --soft
    rehh = reset --hard HEAD
    remh = reset --mixed HEAD
    resh = reset --soft HEAD
    #############
    r = remote
    ra = remote add
    rr = remote rm
    rv = remote -v
    rn = remote rename
    rao = remote add origin
    rau = remote add upstream
    rro = remote remove origin
    rru = remote remove upstream
    #############
    s = status
    sb = status -s -b
    #############
    sa = stash apply
    sc = stash clear
    sd = stash drop
    sl = stash list
    ss = stash save
    sw = stash show
    #############
    t = tag --sort=taggerdate
    td = tag -d
    #############
    w = show
    wp = show -p
    wr = show -p --no-color
    #############
    aliases = !git config -l | grep alias | cut -c 7-
    configreset = git config --local credential.helper ""
    ours = "!f() { git checkout --ours $@ && git add $@; }; f"
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

    #############
    # Macros
    # RELEASE.
    # aula = "!f() { git add -A; git commit -m \"release: add aula $@\"; git tag \"aula-$@\"; git push origin master --tags; }; f"
    aula = "!f() { git add -A; git commit -m \"release: add aula $@\"; }; f"
    release = "!f() { git tag \"$@\"; git push origin master --tags; }; f"
[commit]
    # template = ~/.gitcommit

# vim: ft=gitconfig
