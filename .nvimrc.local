" Configurações built-in do nvim

"*********************************************************
" Basic Setup
"*********************************************************
" Encoding
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8
set bomb
set binary

" Fix backspace indent
set backspace=indent,eol,start

" Tabs. May be overriten by autocmd rules
set tabstop=4
set softtabstop=0
set shiftwidth=4
set expandtab

" Searching
set hlsearch
set incsearch
":%s"
if has('nvim')
	set inccommand=split 
endif
set ignorecase
set smartcase

" Directories for swp files
set nobackup
set noswapfile
set autochdir
set fileformats=unix,dos,mac

" Delay entre atalhos
set ttimeout
set ttimeoutlen=100
set timeoutlen=3000

" Copy paste
set clipboard=unnamed
vnoremap <leader>y "+y:echo "Copiado!!"<CR>

" Quebra de linha com simbolo
set showbreak=↳\

" Mostra os comandos no canto inferior direito
set showcmd

"-------------------------------------------------
" Popup
"-------------------------------------------------
set wildmenu
set wildmode=list:full
set completeopt=longest,menuone,preview " cool completion view
set completeopt+=noselect               " deixar digitar
set wildchar=<Tab>                      " (default)
set omnifunc=syntaxcomplete#Complete    " ctrl-x ctrl-o
set complete=.,w,b,u,t

"*********************************************************
" Abbreviations/Commands
"*********************************************************
" No one is really happy until you have this shortcuts
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qa! qa!
cnoreabbrev QA! qa!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qa qa
cnoreabbrev QA qa

" Cursor
cnoreabbrev cul set cul
cnoreabbrev nocul set nocul

"-------------------------------------------------
" Nvimrc
"-------------------------------------------------
cnoreabbrev rc vsp ~/.nvimrc
cnoreabbrev rl vsp ~/.nvimrc.local
cnoreabbrev rb vsp ~/.nvimrc.local.bundles
cnoreabbrev rs source ~/.nvimrc

"*********************************************************
" Mappings
"*********************************************************
" leader on ~/.nvimrc

" Completar snippet
noremap ,, <ESC>/{%[^%]*%}<CR>c%
inoremap ,, <ESC>/{%[^%]*%}<CR>c%

" Fechar automaticamente
" Melhorar o <left><left>......, vimrc não reconhece comando de leader para {%%}
" Muito cansativo usar a regra de quebrar linha no {} e rever em outros para não fazer
inoremap ¢ (){%%}<left><left><left><left><left>
inoremap ( (){%%}<left><left><left><left><left>
inoremap { {}{%%}<left><left><left><left><left>
inoremap [ []{%%}<left><left><left><left><left>
inoremap " ""{%%}<left><left><left><left><left>
inoremap ' ''{%%}<left><left><left><left><left>

" j e k mantem cursor no meio do editor
nnoremap j jzz
nnoremap k kzz

" Search will center on the line it's found in.
nnoremap n nzzzv
nnoremap N Nzzzv

" Only hjkl
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

nnoremap <c-n> :tabe 

" Acabar com o ctrl z
nnoremap <C-Z> u
nnoremap <C-z> u
" re do with <C-R> built-in

" Close all splits
noremap <Leader>e :on<CR>
" wgy dont work????????
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif


" Tabs
nnoremap <Tab> gt
nnoremap <S-Tab> gT

" Clean search (highlight)
nnoremap <leader><space> :noh<cr>

" Indent all file and go back
nnoremap <C-A> i<++><esc>gg=G/<++>/<CR>v/><CR>dzz==

" Echo local
noremap <Leader>. :pwd<CR>

"-------------------------------------------------
" Split
"-------------------------------------------------
" Open the same file
noremap <leader>h :<C-u>split<CR>
noremap <leader>v :<C-u>vsplit<CR>
" Search an file
noremap <leader>l :<C-u>vsp 
noremap <leader>j :<C-u>sp 

" Switching windows
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-h> <C-w>h

" Resize
noremap - <C-w>-
noremap + <C-w>+
noremap > <C-w>>
noremap < <C-w><

"-------------------------------------------------
" DeathNotes
"-------------------------------------------------
" % newfile
" R rename
" D delete
noremap <silent> <leader>dn :vsp ~/dev/dotfiles/nvim/notes/<CR>

" Simbolos para as deathnotes
" todo: identificar pwd e aplicar somente no diretorio os remaps
inoremap *** <c-K>Sb<space>
inoremap ___ <CR><CR><up><tab><tab><tab><tab><tab><tab><c-K>HH<c-K>HH<c-K>HH<down>

"*********************************************************
" Visual Settings
"*********************************************************
syntax on                   " Required for plugins
filetype plugin indent on   " Required for plugins
set relativenumber          " Distancias entre a linha do cursor
set number                  " Numero das linhas
set autoread                " Checar quando o texto for modificado
set showmatch               " Mostra fechamento de {['']}
set ai                      " Auto indentação -> ==
set mouse=a                 " Libera uso do mouse em todos modos

"*********************************************************
" Custom configs langs
"*********************************************************
" Funções para comentar/decomentar linha a linha de código
" Parâmetro deve ser entre aspas e conter, se necessário, espaço e contra-barra
function ComentaNormal(carac)
    execute "normal! I".a:carac
    echo a:carac
endfunction

function ComentaVisual(carac)
    execute "normal! I".a:carac
endfunction

"#########################################
" GO
"#########################################
augroup go
    " Comenta
    au FileType go vnoremap // :call ComentaVisual("// ")<CR>
    au FileType go vnoremap ;; :s/\/\/\s/<CR>:noh<CR>
    au FileType go nmap // :call ComentaNormal("// ")<esc>
    au FileType go nmap ;; :s/\/\/\s/<CR>:noh<CR>
augroup END

"#########################################
" MARKDOWN
"#########################################
augroup markdown
    " Compila, abre evince e deleta pdf
    au FileType markdown nmap <leader>r <Esc>:w<CR>:!clear;pandoc % -o '%:r'.pdf<CR><CR>
    au FileType markdown nmap <leader>e <Esc>:w<CR>:!clear;evince '%:r'.pdf &<CR><CR>
    au FileType markdown nmap <leader>d <Esc>:w<CR>:!clear;rm '%:r'.pdf &<CR><CR>
augroup END

"#########################################
" SHELL
"#########################################
augroup sh
    au FileType sh nmap <leader>r <Esc>:w<CR>:!clear;chmod +x % ; ./%<CR>
augroup END

"#########################################
" LATEX
"#########################################
augroup tex
    " Comenta
    au FileType tex vnoremap // :call ComentaVisual("% ")<CR>
    au FileType tex vnoremap ;; :s/%\s/<CR>:noh<CR>
    au FileType tex nmap // :call ComentaNormal("% ")<esc>
    au FileType tex nmap ;; :s/%\s/<CR>:noh<CR>
augroup END

" Reconhecer classes com syntax de latex
au BufNewFile,BufRead *.cls set filetype=tex

"#########################################
" PYTHON
"#########################################
augroup python
    au FileType python nmap <leader>r :vsp<CR>:terminal python3 %<CR>
    au FileType python vnoremap // :call ComentaVisual("# ")<CR>
    au FileType python vnoremap ;; :s/%\s/<CR>:noh<CR>
    au FileType python nmap // :call ComentaNormal("# ")<esc>
    au FileType python nmap ;; :s/%\s/<CR>:noh<CR>
augroup END

"#########################################
" PHP
"#########################################
augroup python
    au FileType php nmap <leader>r :vsp<CR>:terminal php %<CR>
    au FileType php vnoremap // :call ComentaVisual("// ")<CR>
    au FileType php vnoremap ;; :s/%\s/<CR>:noh<CR>
    au FileType php nmap // :call ComentaNormal("// ")<esc>
    au FileType php nmap ;; :s/%\s/<CR>:noh<CR>
augroup END
"*********************************************************
" File browsing
"*********************************************************
" :edit a folder to open a file browser
" <CR>/v/t to open in an h-split/v-split/tab
" Check |netrw-browse-maps| for more mappings
let g:netrw_banner=0        " Disable annoying banner
let g:netrw_altv=1          " Open splits to the right
let g:netrw_liststyle=3     " Tree view

" Toggle para mostrar diretórios
let g:tnet = 1
fun! ToggleGerenciador()
    if(g:tnet==1)
        :vs
        :edit .
        let g:tnet = 0
    else
        :q!
        let g:tnet = 1
    endif
endfun
nnoremap <leader><CR> :call ToggleGerenciador()<cr>

