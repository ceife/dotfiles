" Configurações de plugins do nvim

" Required:
call plug#begin(expand('~/.config/nvim/plugged'))

"*********************************************************
" Plug install packages
"*********************************************************
" Barra lateral que mostra variáveis, funçoes objetos e etc
" Instalar ctags: sudo apt-get install exuberant-ctags
Plug 'majutsushi/tagbar'

" Uteis para git
Plug 'tpope/vim-fugitive'       " Comandos git no vim
Plug 'junegunn/gv.vim'          " Commits in browser
Plug 'airblade/vim-gitgutter'   " Marcações + - _ ~ de git

Plug 'mattn/emmet-vim'
"Plug 'torbiak/probe'

" Engine de snippets
Plug 'SirVer/ultisnips'

" Lint deral do vim
Plug 'w0rp/ale'

" cores com highlight no vim
" :ColorToggle
Plug 'chrisbra/Colorizer'

" Ferramentas de visualização CSV
Plug 'chrisbra/csv.vim'

" Explorador de arquivos
Plug 'ryanoasis/vim-devicons' " Icones na bufline e explorador de arquivos
if has('nvim')
    Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' } " Explorador de arquivos, substituindo netrw
else
    Plug 'Shougo/defx.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif
Plug 'kristijanhusak/defx-icons' " Adaptação de devicons para o explorador defx
Plug 'bagrat/vim-buffet' " Bufline
Plug 'sunaku/vim-modusline'

" Apresentações
" :Goyo ou :Goyo 80%x80%
Plug 'junegunn/goyo.vim'

" Autocomplete
if has('nvim')
    Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    Plug 'wokalski/autocomplete-flow'

" You will also need the following for function argument completion:
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
else
    Plug 'Shougo/deoplete.nvim'
    Plug 'roxma/nvim-yarp'
    Plug 'roxma/vim-hug-neovim-rpc'
endif

" Run, test and read documentation for go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Sintaxe de linguagens vim
" Deve ser instalado DEPOIS do vim go
Plug 'sheerun/vim-polyglot'

" Fuzzy search
Plug 'ctrlpvim/ctrlp.vim'
call plug#end()

"*********************************************************
"" Plugins config
"*********************************************************
"-------------------------------------------------
" Themes
"-------------------------------------------------
" Tema próprio
so ~/dev/dotfiles/nvim/thenfeite.vim

" Ver highlight group da palavra sob o cursor
" https://vim.fandom.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
nnoremap <c-t> <ESC>:echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
            \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
            \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" set termguicolors

"-------------------------------------------------
" Dev and Apresentation mode
"-------------------------------------------------
fun DevRead()
    Goyo!
    set background=dark
endfun
cnoreabbrev dev call DevRead()

fun AprRead()
    Goyo
    set background=light
endfun
cnoreabbrev apr call AprRead()

"#########################################
" Polyglot
"#########################################
let g:polyglot_disabled = ['go', 'latex']

"...........
" Vim-Javascript
"...........
" erro ao utilizar conceal proprio
"   ao utilizar await function o simbolo await se repete duas vezes.
" let g:javascript_conceal_arrow_function       = "→"
" let g:javascript_conceal_function             = "ƒ"
" let g:javascript_conceal_null                 = "ø"
" let g:javascript_conceal_return               = "↖"
" let g:javascript_conceal_undefined            = "¿"
" let g:javascript_conceal_prototype            = "¶"
" let g:javascript_conceal_static               = "•"
"let g:javascript_conceal_this                 = "@"
"let g:javascript_conceal_NaN                  = "ℕ"
"let g:javascript_conceal_super                = "Ω"

"#########################################
" Vim-Go
"#########################################
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports" " Import ao salvar
let g:go_fmt_fail_silently = 1
let g:go_info_mode='guru'

augroup go
    " Executa
    au FileType go nmap <Leader>r <Plug>(go-run)

    " Testa
    au FileType go nmap <Leader>tp <Plug>(go-test)
    au FileType go nmap <Leader>tt :GoTest ./...<CR>
    au FileType go nmap <Leader>tf <Plug>(go-test-func)
    au FileType go nmap <Leader>cc <Plug>(go-coverage-toggle)
    au FileType go nmap <Leader>cb :GoCoverageBrowser<CR>
    au FileType go nmap <Leader>a :w<CR>:GoAlternate<CR>
    ":AV
    au Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
    ":AI
    au Filetype go command! -bang AI call go#alternate#Switch(<bang>0, 'split')

    " Documentação
    au FileType go nmap <Leader>dv <Plug>(go-doc)
    au FileType go nmap <Leader>db <Plug>(go-doc-browser)
    au FileType go nmap <Leader>gi <Plug>(go-info)

    "<- [[
    "-> ]]
    au FileType go nmap <Leader>dc :GoDecls<CR>
    au FileType go nmap <Leader>dd :GoDeclsDir<CR>

    au BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
augroup END

"-------------------------------------------------
" Autocomplete
"-------------------------------------------------
"#########################################
" Deoplete
"#########################################
let g:deoplete#enable_at_startup = 1

"#########################################
" UltiSnips
"#########################################
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=[$HOME.'/dev/dotfiles/nvim/nenippets']
let g:UltiSnipsSnippetsDir="~/dev/dotfiles/nvim/nenippets"
let g:tex_flavor='latex' "ultisnippets reconhecerem .tex

" snippets diferentes para o mesmo arquivo
augroup javascript
    " au filetype javascript UltiSnipsAddFiletypes html
    au BufEnter *.vue UltiSnipsAddFiletypes javascript.html
    au BufEnter *.js so ~/dev/dotfiles/nvim/customhigroups.vim
augroup END

noremap <leader><tab> :UltiSnipsEdit<cr>/\<snippet\> .*<cr>N:echo "tecle n"<cr>

"#########################################
" TagBar
"#########################################
map <leader><bs> :Tagbar<cr>

"-------------------------------------------------
" Git
"-------------------------------------------------
"#########################################
" Fugitive
"#########################################
" Para tirar arquivos de staged basta aprter :G
"   na janela de status apertar - no arquivo para add ou remover
" :ga git add %
cnoreabbrev gw Gw
" :gb ver linha a linha os commits
cnoreabbrev gb Gblame
" :gc git commit
cnoreabbrev gc Gcommit
" :gd mostra diferenças
cnoreabbrev gd Gdiff
" :gs mostra status de staged ou não
cnoreabbrev gs Gstatus
" :gv abre em vertical split o mesmo arquivo staged ou comitado
cnoreabbrev gv Gvsplit

"#########################################
" Gitgutter
"#########################################
" [c -> previous chunk   ]c -> next chunk
" <leader>hp -> mostra valor anterior do hunk
" <leader>hs -> stage["git add line"] modificação, removendo chunk
" <leader>hu -> desfaz modificação não staged no chunk
set updatetime=100 "atualização mais rápida

":GitGutterEnable
let g:gitgutter_enabled=0
noremap <Leader>c :GitGutterToggle<CR>

"#########################################
" Ale
"#########################################
nmap <silent> ! <Plug>(ale_previous_wrap)

function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors
    return l:counts.total == 0 ? 'OK' : printf(
                \   '%dW %dE',
                \   all_non_errors,
                \   all_errors
                \)
endfunction
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"-------------------------------------------------
" Misc
"-------------------------------------------------
"#########################################
" Statusline // using some plugins
"#########################################
" Créditos: https://gabri.me/blog/diy-vim-statusline
" Créditos: https://kadekillary.work/post/statusline/

" Plugin modusline
" PROS:
"   mode() muda a cor da statusline
"   statusline aparece somente nas janelas ativas em split
" CONS:
"   Performance?

let g:modusline_colors           = {}              " see :help mode()
let g:modusline_colors['n']      = ''              " Normal
let g:modusline_colors['c']      = ''              " Command-line
let g:modusline_colors['no']     = '%#DiffChange#' " Operator-pending
let g:modusline_colors['v']      = '%#DiffText#'   " Visual by character
let g:modusline_colors['V']      = '%#DiffText#'   " Visual by line
let g:modusline_colors["\<C-V>"] = '%#DiffText#'   " Visual blockwise
let g:modusline_colors['s']      = '%#WildMenu#'   " Select by character
let g:modusline_colors['S']      = '%#WildMenu#'   " Select by line
let g:modusline_colors["\<C-S>"] = '%#WildMenu#'   " Select blockwise
let g:modusline_colors['i']      = '%#DiffAdd#'    " Insert
let g:modusline_colors['R']      = '%#DiffDelete#' " Replace |R|
let g:modusline_colors['Rv']     = '%#DiffDelete#' " Virtual Replace |gR|
let g:modusline_colors['cv']     = '%#MatchParen#' " Vim Ex mode |gQ|
let g:modusline_colors['ce']     = '%#MatchParen#' " Normal Ex mode |Q|
let g:modusline_colors['r']      = '%#Todo#'       " Hit-enter prompt
let g:modusline_colors['rm']     = '%#Todo#'       " The -- more -- prompt
let g:modusline_colors['r?']     = '%#Todo#'       " A |:confirm| query of some sort
let g:modusline_colors['!']      = '%#IncSearch#'  " Shell or external command is executing
let g:modusline_colors['t']      = '%#DiffAdd#'    " Terminal mode: keys go to the job
let g:modusline_colors['ic']     = '%#DiffChange#' " see :help ins-completion
let g:modusline_colors['Rc']     = '%#DiffChange#' " see :help ins-completion

set statusline+=
set statusline+=\ %{FugitiveStatusline()}	    " Branch
set statusline+=\%=						        " Espaço
set statusline+=\ %r\%m\%f\ 	                " Nome readonly, modificado e nome abreviado
set statusline+=%=						        " Espaço
set statusline+=\ %p%%\ %l:\%c                  " Rownumber, total e percentual
set statusline+=\ %{LinterStatus()}

"#########################################
" CtrlP
"#########################################
" USOS:
"   <c-p> pesquisar arquivo <enter>
"   <c-p> digitar arquivo ou /path/arquivo a ser criado <c-y><enter>
"
" PROS:
"   fuzzyfinder escrito em vimscript
"   é possível criar arquivos diretamente
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git\|dist'
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_show_hidden = 1

" Exibe mesmo os buffers abertos!
let g:ctrlp_match_current_file = 1

" devicons
let g:webdevicons_enable_ctrlp = 1
  let g:ctrlp_open_multiple_files = 'i'

let g:ctrlp_prompt_mappings = {
            \ 'CreateNewFile()':      ['<c-y>'],
            \ 'ToggleFocus()':        [''],
            \ 'PrtSelectMove("j")':   ['<c-j>', '<s-tab>', '<down>'],
            \ 'PrtSelectMove("k")':   ['<c-k>', '<tab>', '<up>'],
            \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
            \ 'PrtCurLeft()':         [''],
            \ 'AcceptSelection("h")': ['<c-h>', '<c-cr>', '<c-s>'],
            \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>'],
            \ 'ToggleType(1)':        ['<c-f>', '<c-up>'],
            \ 'ToggleType(-1)':       ['<c-b>', '<c-down>'],
            \ 'MarkToOpen()':         ['<c-z>'],
            \ 'OpenMulti()':          ['<c-o>'],
            \ }

"#########################################
" Vim-buffet
"#########################################
" Erro, aparece "z"
"let g:buffet_powerline_separators = 1

function! g:BuffetSetCustomColors()
    " Cor padrão do buffer
    " ------------------------------

    " the current buffer
    hi BuffetCurrentBuffer guibg=lightblue guifg=black gui=NONE ctermbg=lightblue guifg=black cterm=NONE

    " an active buffer (a non-current buffer visible in a non-current window)
    hi BuffetActiveBuffer guibg=NONE guifg=white gui=NONE ctermfg=white ctermbg=NONE cterm=NONE

    " a non-current and non-active buffer
    hi BuffetBuffer guibg=NONE guifg=white gui=NONE ctermfg=white ctermbg=NONE cterm=NONE


    " Modificados
    " ------------------------------

    " the current buffer when modified
    hi BuffetModCurrentBuffer guibg=lightblue guifg=black gui=bold ctermfg=black ctermbg=lightblue cterm=bold

    " a modified active buffer (a non-current buffer visible in a non-current window)
    hi BuffetModActiveBuffer guibg=NONE guifg=lightblue gui=bold ctermfg=lightblue ctermbg=NONE cterm=bold

    " a modified non-current and non-active buffer
    hi BuffetModBuffer guibg=NONE guifg=lightblue gui=bold ctermfg=lightblue ctermbg=NONE cterm=bold


    " Simbolos
    " ------------------------------

    " the truncation indicator (count of truncated buffers from the left or right)
    hi BuffetTrunc guibg=NONE guifg=yellow gui=bold ctermfg=yellow ctermbg=NONE cterm=bold

    " a tab
    hi BuffetTab guibg=NONE guifg=NONE ctermfg=NONE ctermbg=NONE
endfunction


let g:buffet_use_devicons = 1


"#########################################
" Defx
"#########################################
"PROS:
"   no buffer like NetrwTreeListing
"   without mouse
"   create files with /some/path
"   create files
"   easy remove, move or copy one or multiples files/folders
"   compatibility with devicons
"CON:
"   performance? dependencies?

" ignore root marked
call defx#custom#option('_', {
            \ 'root_marker': ':',
            \ })
call defx#custom#column('filename', {
            \ 'root_marker_highlight': 'Ignore',
            \ })

" Set icons
let g:defx_icons_directory_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
let g:defx_icons_nested_closed_tree_icon = ''
let g:defx_icons_root_opened_tree_icon = ''
let g:defx_icons_nested_opened_tree_icon = ''
"Note: Syntax highlighting can cause some performance issues in defx window. Just disable it with the
"let g:defx_icons_enable_syntax_highlight = 0
call defx#custom#option('_', {
            \ 'columns': 'mark:indent:icons:filename:type:size:time',
            \ })

nnoremap <silent> <bs> :Defx -toggle -auto-cd<CR>


autocmd FileType defx call s:defx_my_settings()
"autocmd FileType defx normal :Defx -columns=icons:filename:type
function! s:defx_my_settings() abort
    " Define mappings
    nnoremap <silent><buffer><expr> <bs> defx#do_action('quit')
    nnoremap <silent><buffer><expr> <CR>
                \ defx#is_directory() ?
                \ defx#do_action('open_or_close_tree') :
                \ defx#do_action('open')
    nnoremap <silent><buffer><expr> m defx#do_action('move')
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> D defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> F defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> S defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> dd defx#do_action('remove')
    nnoremap <silent><buffer><expr> r defx#do_action('rename')
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> Y defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> . defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> h defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> l defx#do_action('open_directory')
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> * defx#do_action('toggle_select')
    vnoremap <silent><buffer><expr> * defx#do_action('toggle_select_visual')
    vnoremap <silent><buffer><expr> y defx#do_action('multi', ['toggle_select_visual', 'copy'])
    nnoremap <silent><buffer><expr> yy defx#do_action('copy')
    "nnoremap <silent><buffer><expr> * defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'

    nnoremap <silent><buffer><expr> C
                \ defx#do_action('toggle_columns',
                \                'mark:indent:icon:filename:type:size:time')
endfunction

let g:neosnippet#enable_completed_snippet = 1
let g:autocomplete_flow#insert_paren_after_function = 0
