" Configurações de plugins do nvim

" Required:
call plug#begin(expand('~/.config/nvim/plugged'))

"*********************************************************
" Plug install packages
"*********************************************************
" Barra lateral que mostra variáveis, funçoes objetos e etc
" Instalar ctags: sudo apt-get install exuberant-ctags
Plug 'majutsushi/tagbar'

Plug 'lervag/vimtex'            " Compilador LaTeX
Plug 'tpope/vim-fugitive'       " Comandos git no vim
Plug 'junegunn/gv.vim'          " Commits in browser
"Plug 'junegunn/vim-emoji'          " Commits in browser
Plug 'airblade/vim-gitgutter'   " Marcações + - _ ~ de git
Plug 'SirVer/ultisnips'         " Engine de snippets
Plug 'w0rp/ale'                 " Lint geral do vim
Plug 'chrisbra/Colorizer'       " Cores exibidas no nvim

" Favorite themes
" e.g. :colo preto
Plug 'NLKNguyen/papercolor-theme'
Plug 'ewilazarus/preto'
Plug 'andreasvc/vim-256noir'

" Apresentações
" :Goyo ou :Goyo 80%x80%
" set background=light
Plug 'junegunn/goyo.vim'

" Autocomplete
if has('nvim')
	Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
	Plug 'Shougo/deoplete.nvim'
	Plug 'roxma/nvim-yarp'
	Plug 'roxma/vim-hug-neovim-rpc'
endif

" Run, test and read documentation for go
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Sintaxe de linguagens vim
" Deve ser instalado DEPOIS do vim go
Plug 'sheerun/vim-polyglot'

" Fuzzy search on terminal with ctrl-p
" but not working for some reason with '/dev/tty' ¯\_(ツ)_/¯
"Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
"Plug 'junegunn/fzf.vim'
Plug 'ctrlpvim/ctrlp.vim'
call plug#end()

"*********************************************************
"" Plugins config
"*********************************************************
"-------------------------------------------------
" Themes
"-------------------------------------------------
"#########################################
" PaperColor
"#########################################
let g:PaperColor_Theme_Options = {
			\   'theme': {
			\     'default.dark': {
			\ 		'allow_bold': 1,
			\ 		'allow_italic': 1,
            \       'override' : {
            \         'color03' : ['#080808', '114'],
            \         'color05' : ['#080808', '240'],
            \         'color07' : ['#080808', '248'],
            \         'color10' : ['#080808', '037'],
            \         'color14' : ['#080808', '037'],
            \       }
			\     },
			\     'default.light': {
			\ 		'allow_bold': 1,
			\ 		'allow_italic': 1,
			\     }
			\   }
			\ }

" https://github.com/NLKNguyen/papercolor-theme/blob/master/colors/PaperColor.vim
" https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg
" Tentando basear no onedark
"let g:PaperColor_Theme_Options = {
"            \   'theme': {
"            \     'default.dark': {
"            \ 		'allow_bold': 1,
"            \ 		'allow_italic': 1,
"            \       'override' : {
"            \         'color00' : ['#080808', '235'],
"            \         'linenumber_bg' : ['#080808', '235'],
"            \         'color03' : ['#080808', '114'],
"            \         'color05' : ['#080808', '240'],
"            \         'color07' : ['#080808', '248'],
"            \         'color10' : ['#080808', '176'],
"            \         'color11' : ['#080808', '153'],
"            \         'color13' : ['#080808', '179'],
"            \         'color14' : ['#080808', '176'],
"            \       }
"            \     },
"            \     'default.light': {
"            \ 		'allow_bold': 1,
"            \ 		'allow_italic': 1,
"            \     }
"            \   }
"            \ }

set background=dark " Light or dark for PaperColor colorscheme
colorscheme PaperColor

" Cores mais bonitas porem não funciona com urxvt ¯\_(ツ)_/¯
" set termguicolors

"-------------------------------------------------
" Dev and Apresentation mode
"-------------------------------------------------
fun DevRead()
    Goyo!
    set background=dark
endfun
cnoreabbrev dev call DevRead()

fun AprRead()
    Goyo
    set background=light
endfun
cnoreabbrev apr call AprRead()

"#########################################
" Polyglot
"#########################################
let g:polyglot_disabled = ['go', 'latex']

"#########################################
" Fzf
"#########################################
"nnoremap <C-p> :Files<CR>

"#########################################
" Emoji
"#########################################
"APRENDER MAIS SOBRE BUFFERS ANTES DE USAR EMOJIS
"set completefunc=emoji#complete

"#########################################
" VimTex
"#########################################
augroup tex
	au FileType tex nmap <leader>r :VimtexCompile<cr>

    " VimTex falha diversas vezes e é preciso compilar com pdflatex para o plugin voltar
	au FileType tex nmap <leader>p <Esc>:!clear;pdflatex %<CR><CR>

    " Como era antes do plugin
	" É necessário compilar duas vezes para ter certeza de atualizar a toc
	" https://tex.stackexchange.com/questions/301103/empty-table-of-contents
	" Também compilar bibliografia e mais uma vez a toc
	" au FileType tex nmap <leader>r <Esc>:w<CR>:!clear;pdflatex %<CR><CR>:!clear;pdflatex %<CR><CR>:!clear;bibtex '%:r'.aux<CR><CR>:!clear;pdflatex %<CR><CR>:!clear;pdflatex %<CR><CR>
	au FileType tex nmap <leader>e <Esc>:!clear;$PDFVIEWER '%:r'.pdf &<CR><CR>
augroup end

"#########################################
" Vim-Go
"#########################################
let g:go_list_type = "quickfix"
let g:go_fmt_command = "goimports" " Import ao salvar
let g:go_fmt_fail_silently = 1
let g:go_info_mode='guru'

augroup go
	" Executa
	au FileType go nmap <Leader>r <Plug>(go-run)

	" Testa
	au FileType go nmap <Leader>tp <Plug>(go-test)
	au FileType go nmap <Leader>tt :GoTest ./...<CR>
	au FileType go nmap <Leader>tf <Plug>(go-test-func)
	au FileType go nmap <Leader>cc <Plug>(go-coverage-toggle)
	au FileType go nmap <Leader>cb :GoCoverageBrowser<CR>
	au FileType go nmap <Leader>a :w<CR>:GoAlternate<CR>
	":AV
	au Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
	":AI
	au Filetype go command! -bang AI call go#alternate#Switch(<bang>0, 'split')

	" Documentação
	au FileType go nmap <Leader>dv <Plug>(go-doc)
	au FileType go nmap <Leader>db <Plug>(go-doc-browser)
	au FileType go nmap <Leader>gi <Plug>(go-info)

	"<- [[
	"-> ]]
	au FileType go nmap <Leader>dc :GoDecls<CR>
	au FileType go nmap <Leader>dd :GoDeclsDir<CR>

	au BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4
augroup END

"-------------------------------------------------
" Autocomplete
"-------------------------------------------------
"#########################################
" Deoplete
"#########################################
let g:deoplete#enable_at_startup = 1

"#########################################
" UltiSnips
"#########################################
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=[$HOME.'/dev/dotfiles/nvim/nenippets']
let g:UltiSnipsSnippetsDir="~/dev/dotfiles/nvim/nenippets"
let g:tex_flavor='latex' "ultisnippets reconhecerem .tex

noremap <leader><tab> :UltiSnipsEdit<cr>/\<snippet\> .*<cr>N:echo "tecle n"<cr>

"#########################################
" TagBar
"#########################################
map <leader><bs> :Tagbar<cr>

"-------------------------------------------------
" Git
"-------------------------------------------------
"#########################################
" Fugitive
"#########################################
noremap <Leader>gw :Gw<CR>
noremap <Leader>gq :Gwq<CR>
noremap <Leader>gc :Gcommit<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gd :Gdiff<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gr :Gread<CR>

"#########################################
" Gitgutter
"#########################################
" [c -> previous chunk   ]c -> next chunk
" <leader>hp -> mostra valor anterior do hunk
" <leader>hs -> stage["git add line"] modificação, removendo chunk
" <leader>hu -> desfaz modificação não staged no chunk
set updatetime=100 "atualização mais rápida

":GitGutterEnable
let g:gitgutter_enabled=0
noremap <Leader>c :GitGutterToggle<CR>

"#########################################
" Ale
"#########################################
nmap <silent> ! <Plug>(ale_previous_wrap)

function! LinterStatus() abort
	let l:counts = ale#statusline#Count(bufnr(''))
	let l:all_errors = l:counts.error + l:counts.style_error
	let l:all_non_errors = l:counts.total - l:all_errors
	return l:counts.total == 0 ? 'OK' : printf(
				\   '%dW %dE',
				\   all_non_errors,
				\   all_errors
				\)
endfunction
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
"-------------------------------------------------
" Misc
"-------------------------------------------------
"#########################################
" Statusline // using some plugins
"#########################################
" Créditos: https://gabri.me/blog/diy-vim-statusline
" Créditos: https://kadekillary.work/post/statusline/
set laststatus=2	"fixar status bar

set statusline+=
set statusline+=\ %{LinterStatus()}
set statusline+=%=						        " Espaço
set statusline+=\ %{FugitiveStatusline()}\ %*	" Branch
set statusline+=\ %r\%m\%f\ %* 	                " Nome readonly, modificado e nome abreviado
set statusline+=%=						        " Espaço
set statusline+=\ %p%%\ %l:\%c                  " Rownumber, total e percentual

"#########################################
" CtrlP
"#########################################
nnoremap <C-Space> :CtrlPBuffer<CR>
