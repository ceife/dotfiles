# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# snippet inword "in word" i
# $0
# endsnippet
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet qw
${1:a text}
${1/\w+\s*/\u$0/}
endsnippet


snippet one "visual transform" b
${1/\w+/${1}/g}
endsnippet

snippet two "placeholder transform" b
${1/^(?P<word>[a-z]+)!(?P=word)$/$1/g}
endsnippet

snippet constm "const { ... } = module" 
const { $0 } = $1;
endsnippet

snippet ? "condition ? true : false" 
${1:condition} ? ${2:true} : ${3:false}
endsnippet

snippet try "try catch"
try {
	${1:// ...}
} catch (err) {
	${0:// ...}
}
endsnippet

snippet function "function (){...}"
function ${1:nome}(){
	${0:// ...}
}
endsnippet

snippet if "if() { ... }"
if (${1:condition}) {
	${0:// ...}
}
endsnippet

snippet log "console.log(...)"
console.log($0);
endsnippet

snippet req "require('...')"
require('$0');
endsnippet

snippet creq "const ... = require('...')"
const ${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/$2/g} = require('$1');
endsnippet
snippet imp "import ... from ..."
import ${1/(.+\/)*(\w+)(-|\b|$)(\..+$)?/$2/g} from '$1';
endsnippet

snippet mod "module.exports = ..."
module.exports = $0
endsnippet

###################################
# express
###################################
snippet eapp "const app = express()"
const ${0:app} = express();
endsnippet

snippet erouter "const router = express.Router()"
const ${1:routes} = ${0:express}.Router();
endsnippet

snippet eget "routes.get('/', ...)"
${1:routes}.get('${2:/}', $0);
endsnippet

snippet epost "routes.post('/', ...)"
${1:routes}.post('${2:/}', $0);
endsnippet

snippet edel "routes.delete('/', ...)"
${1:routes}.delete('${2:/}', $0);
endsnippet

snippet eput "routes.put('/', ...)"
${1:routes}.put('${2:/}', $0);
endsnippet

snippet elis "app.listen(3333)"
${0:app}.listen(3333);
endsnippet

###################################
# mongoose
###################################
snippet mcon "mongoose.connect"
${1:mongoose}.connect('$0', {
	useNewUrlParser: true
});
endsnippet

snippet msch "mongoose.Schema"
const ${1:Class}Schema = ${2:mongoose}.Schema({
	${0:Nome: String,}
}${2:, {
	// created at
	// updated at
	timestamps: true
}});
endsnippet
