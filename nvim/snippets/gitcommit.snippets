# https://gist.github.com/rxaviers/7360908
# https://gitmoji.carloscuesta.me/
# https://opensource.com/article/19/2/emoji-log-git-commit-messages

# :tada:
snippet initial "🎉 Initial commit"
🎉 Initial commit
endsnippet

# :package:
# 📦 FEAT${1/(\w\.?)+/(?1:\(:)/}${1:}${1/(\w\.?)+/(?1:\):)/}: ${0:Git ignore file}
snippet feat "📦 FEAT: imperative_message"
📦 FEAT${1:($2)}: ${0:add avatar de usuário}
endsnippet

# :bug:
snippet fix "🐛 FIX: imperative_message"
🐛 FIX${1:($2)}: ${0:add try catch para exception X}
endsnippet

# :ok_hand:
snippet refactor "👌 REFACTOR: imperative_message"
👌 REFACTOR${1:($2)}: ${0:remove envio de mensagem}
endsnippet

# :book:
snippet docs "📖 DOCS: imperative_message"
📖 DOCS${1:(${2:readme})}: ${0:atualiza setup do projeto}
endsnippet

# :art:
snippet style "🎨 STYLE: imperative_message"
🎨 STYLE${1:($2)}: ${0:troca aspas para apóstrofos}
endsnippet

# :white_check_mark:
snippet test "✅ TEST: imperative_message"
✅ TEST${1:($2)}: ${0:add testcase}
endsnippet

# :wrench:
snippet chore "🔧 CHORE: IMPERATIVE_MESSAGE"
🔧 CHORE${1:($2)}: ${0:add script deploy}
endsnippet

snippet breaking "BREAKING CHANGES"
BREAKING CHANGES
${0:O que vai ser afetado após a mudança?}
endsnippet

snippet opções "Padronização dos commit" b
$1
# Afeta usuário final:
#   FEAT: adiciona, modifica ou remove feature/funcionalidade (afeta MINOR)
#   FIX: corrige bug feature/funcionalidade (afeta PATCH)
# NÃO afeta usuário final:
#   REFACTOR: refatora código de produção
#   DOCS: adiciona, modifica, remove ou estiliza item na documentação
#   TEST: adiciona, modifica ou remove testes
#   CHORE: adiciona, modifica ou remove arquivos auxiliares do ambiente dev (gulp, npm, configurações e etc)
#   STYLE: estiliza código de produção, teste ou de ambiente sem não afetar a lógica
# COMMIT_MSG.md
#
#
endsnippet
