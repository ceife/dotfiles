# multiplas const
snippet cons "const ( ... )"
const (
	$1 = ${0:${VISUAL:iota}}
)
{%%}
endsnippet

# for comum
snippet for "for condition {}"
for ${1:condition} {
	${0}
}
{%%}
endsnippet

# for com contador
snippet fori "for i := 0; i > x; i++ {}"
for ${1:i} := ${2:0}; $1 ${3:>} ${4:x}; $1${5:++} {
	${0}
}
{%%}
endsnippet

# "foreach"
snippet forr "for k, v := range array {...}"
for ${1:_}, ${2:num} := range ${3:nums} {
	${0}
}
{%%}
endsnippet

# declaração de função
snippet func "func X(...) ... {...}"
func ${1:name}(${2:params}) ${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet fp "fmt.Println(...)"
fmt.Println(${1})
endsnippet

snippet ff "fmt.Printf('', x)"
fmt.Printf("${1}", ${2})
endsnippet

snippet imp "import (...)"
import (
	"${1:package}"
)
endsnippet

snippet pkg "package ..."
package "${1:package}"
endsnippet

snippet pkgm "package main"
package main
endsnippet

# declaração de struct
snippet str "type X struct {...}"
type ${1:Struct} struct {
	${0:${VISUAL}}
}
endsnippet

# declaração de interface
snippet int "type I interface {...}"
type ${1:Interface} interface {
	${0:${VISUAL}}
}
endsnippet


snippet switch "switch expression {...}"
switch ${1:expression} {
case ${2}:
	$0
}
endsnippet

# HTTP handler
snippet funch "func handler(w http.ResponseWriter, r *http.Request) {...}"
func ${1:handler}(${2:w} http.ResponseWriter, ${3:r} *http.Request) {
	${0:${VISUAL}}
}
endsnippet

# inicialização e atribuição
snippet : "x := value"
${1:name} := ${0:value}
endsnippet

# if
snippet if "if condition {...}"
if ${1:condition} {
	${0:${VISUAL}}
}{%%}
endsnippet

# teste de erro padrão
snippet if "if err != nil" "re.match('^\s+[^=]*err\s*:?=', snip.buffer[snip.line-1])" be
if err != nil {
	${0:${VISUAL}}
}
{%%}
endsnippet